@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    var user = await UserManager.GetUserAsync(User);
    var roles = await UserManager.GetRolesAsync(user!);

    @* Check if the current page is not the Profile page *@
    @if (!(ViewContext.RouteData.Values["controller"]!.ToString() == "Account" && ViewContext.RouteData.Values["action"]!.ToString() == "Profile"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Account" asp-action="Profile" title="Manage">Hello @User.Identity?.Name!</a>
        </li>
    }

    @* Add New Item button for employees only *@
    @if (roles.Contains("Employee") && !(ViewContext.RouteData.Values["controller"]!.ToString() == "Employee" && ViewContext.RouteData.Values["action"]!.ToString() == "NewItem"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Employee" asp-action="NewItem">Add New Item</a>
        </li>
    }

    @* Order Items button *@
    @if (!(ViewContext.RouteData.Values["controller"]!.ToString() == "Inventory" && ViewContext.RouteData.Values["action"]!.ToString() == "OrderItems"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Inventory" asp-action="OrderItems">Order Items</a>
        </li>
    }

    @* Transaction History button *@
    @if (roles.Contains("Employee") && !(ViewContext.RouteData.Values["controller"]!.ToString() == "Employee" && ViewContext.RouteData.Values["action"]!.ToString() == "TransactionHistory"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Employee" asp-action="TransactionHistory">Transaction History</a>
        </li>
    }

    @* Inventory button for employees only *@
    @if (roles.Contains("Employee") && !(ViewContext.RouteData.Values["controller"]!.ToString() == "Employee" && ViewContext.RouteData.Values["action"]!.ToString() == "Inventory"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Employee" asp-action="Inventory">Inventory</a>
        </li>
    }

    @* Supplies button for employees only *@
    @if (roles.Contains("Employee") && !(ViewContext.RouteData.Values["controller"]!.ToString() == "Employee" && ViewContext.RouteData.Values["action"]!.ToString() == "Supplies"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Employee" asp-action="Supplies">Supplies</a>
        </li>
    }

    @* Cart button for employees only *@
    @if (!(ViewContext.RouteData.Values["controller"]!.ToString() == "Inventory" && ViewContext.RouteData.Values["action"]!.ToString() == "Cart"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Inventory" asp-action="Cart">Cart</a>
        </li>
    }

    <li class="nav-item">
        <form class="form-inline" asp-controller="Account" asp-action="Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button type="submit" class="nav-link btn btn-link text-dark logout">Logout</button>
        </form>
    </li>
}
else
{
    @* Check if the current page is not the Register page *@
    @if (!(ViewContext.RouteData.Values["controller"]!.ToString() == "Account" && ViewContext.RouteData.Values["action"]!.ToString() == "Register"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Account" asp-action="Register">Register</a>
        </li>
    }
    @* Check if the current page is not the Login page *@
    @if (!(ViewContext.RouteData.Values["controller"]!.ToString() == "Account" && ViewContext.RouteData.Values["action"]!.ToString() == "Login"))
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">Login</a>
        </li>
    }
}
</ul>
